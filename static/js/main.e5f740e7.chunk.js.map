{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["dict","Q","name","audio","W","E","A","S","D","Z","X","C","validKeys","concat","Object","toConsumableArray","keys","map","item","toLowerCase","DrumPad","_this","this","id","props","react_default","a","createElement","className","onClick","playAudio","src","type","Component","App","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","displayText","bind","assertThisInitialized","handleKeyPress","handleClick","event","setState","sound","document","getElementById","pad","setTimeout","play","includes","key","toUpperCase","addEventListener","script","async","body","appendChild","App_DrumPad","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5f740e7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nlet dict = {\n  Q: {name:'Heater 1',\n      audio:\"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"},\n  W: {name:'Heater 2',\n      audio:\"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"},\n  E: {name:'Heater 3',\n      audio:\"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"},\n  A: {name:'Dsc Oh',\n      audio:\"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"},\n  S: {name:'Kick n Hat',\n      audio:\"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"},\n  D: {name:'KICK',\n      audio:\"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"},\n  Z: {name:'Chord 1',\n      audio:\"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\"},\n  X: {name:'Chord 2',\n      audio:\"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\"},\n  C: {name:'Chord 3',\n      audio:\"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\"},\n}\n\nlet validKeys = [...Object.keys(dict),\n                 ...Object.keys(dict).map(item=>item.toLowerCase())]\n\nclass DrumPad extends Component {\n\n  render() {\n    let id = this.props.id // onClick={() => this.playAudio(id)}\n    return(\n      <div className=\"drum-pad\" id={id.concat('pad')} onClick={()=>this.props.playAudio(id)}>\n          {id}<audio src={dict[id].audio} type=\"audio/mp3\"  className=\"clip\" id={id} />\n      </div>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayText: 'Press key'\n    }\n    this.playAudio = this.playAudio.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(event){\n\n  }\n  playAudio(id){\n    this.setState({ displayText: dict[id].name  })\n    var sound = document.getElementById(id);\n    var pad = document.getElementById(id.concat('pad'));\n    pad.className = 'pad-clicked'\n    setTimeout(sound.play(),300);\n    setTimeout(()=>{pad.className = 'drum-pad'},300);\n  }\n  handleKeyPress(event) {\n    if (validKeys.includes(event.key)){\n      this.playAudio(event.key.toUpperCase());\n    }\n  }\n\n  componentWillMount(){\n    document.addEventListener(\"keydown\", this.handleKeyPress.bind(this));\n  }\n\n  componentDidMount () {\n    const script = document.createElement(\"script\");\n    script.src = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n    script.async = true;\n    document.body.appendChild(script);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"drum-machine\">\n          <div id=\"display\">{this.state.displayText}</div>\n          <div id=\"pad-container\">\n            <DrumPad id='Q' playAudio={this.playAudio.bind(this)} />\n            <DrumPad id='W' playAudio={this.playAudio.bind(this)}/>\n            <DrumPad id='E' playAudio={this.playAudio.bind(this)}/>\n            <DrumPad id='A' playAudio={this.playAudio.bind(this)}/>\n            <DrumPad id='S' playAudio={this.playAudio.bind(this)}/>\n            <DrumPad id='D' playAudio={this.playAudio.bind(this)}/>\n            <DrumPad id='Z' playAudio={this.playAudio.bind(this)}/>\n            <DrumPad id='X' playAudio={this.playAudio.bind(this)}/>\n            <DrumPad id='C' playAudio={this.playAudio.bind(this)}/>\n          </div>\n        </div>\n        <p>Drum machine by CT</p>\n      </div>\n\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}